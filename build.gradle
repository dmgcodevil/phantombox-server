apply plugin: 'java'
apply plugin: 'idea'

//sourceCompatibility = 1.7

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'

    group = 'com.git.phantombox'
    version = "${versionMajor}.${versionMinor}.${versionBuild}"

    repositories {
        mavenCentral()
        maven {
            url "http://repo.springsource.org/libs-snapshot"
        }

        ivy {
            ivyPattern "$projectDir/repo/[organisation]/[module]-ivy-[revision].xml"
            artifactPattern "$projectDir/repo/[organisation]/[module]-[revision](-[classifier]).[ext]"
            url file(System.getProperty('user.home') + '/.ivylocal')
        }
    }

    uploadArchives {
        repositories {
            ivy { url file(System.getProperty('user.home') + '/.ivylocal') }
        }
    }

/* ---------------- integration tests setup ---------------- */
    configurations {
        integTestCompile { extendsFrom compile }
        integTestRuntime { extendsFrom integTestCompile, runtime }
    }

    sourceSets {
        integTest {
            compileClasspath = sourceSets.main.output + configurations.integTestCompile
            runtimeClasspath = output + sourceSets.main.output + configurations.integTestRuntime
        }
    }

    task intTest(type: Test) {
        testClassesDir = sourceSets.integTest.output.classesDir
        classpath = sourceSets.integTest.runtimeClasspath
    }


    task intTestJar(type: Jar) {
        from sourceSets.integTest.output
    }

    task unitTestJar(type: Jar) {
        from sourceSets.test.output
    }

    /* ---------------- checkstyle setup ---------------- */
    checkstyle {
        configProperties.suppressionsFile = "$rootProject.projectDir/config/checkstyle/suppressions.xml"
    }

    checkstyleMain {
        ignoreFailures = false
        reports {
            include('**/*.java')
            xml {
                destination "$buildDir/reports/checkstyle/main.xml"
            }
        }
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    checkstyleTest {
        ignoreFailures = false
        reports {
            include('**/*.java')
            xml {
                destination "$buildDir/reports/checkstyle/test.xml"
            }
        }
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    checkstyleIntegTest {
        ignoreFailures = false
        reports {
            include('**/*.java')
            xml {
                destination "$buildDir/reports/checkstyle/integTest.xml"
            }
        }
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }


    task checkstyleReport << {
        if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
            ant.xslt(in: "$buildDir/reports/checkstyle/${checkType}.xml",
                    style: "$rootProject.projectDir/config/checkstyle/checkstyle.xsl",
                    out: "$buildDir/reports/checkstyle/checkstyle_${checkType}.html"
            )
        }
    }

    task quality(dependsOn: ['checkstyleMain', 'checkstyleTest', 'checkstyleIntegTest'])

    gradle.taskGraph.afterTask {Task task, TaskState state ->
        if (state.failure) {
            if (task.name in ['checkstyleMain', 'checkstyleTest', 'checkstyleIntegTest']) {
                checkstyleReport {
                    def matcher = task.name =~ /^checkstyle(.*)$/
                    if (matcher.matches()) {
                        checkType = matcher.group(1).toLowerCase()
                    }
                }
                checkstyleReport.execute()
            }
        }
    }


}

