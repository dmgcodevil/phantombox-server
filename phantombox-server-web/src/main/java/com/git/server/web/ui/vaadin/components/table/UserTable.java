package com.git.server.web.ui.vaadin.components.table;


import com.git.domain.api.IUser;
import com.git.server.web.ui.vaadin.mediator.UserMediator;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Table;
import org.apache.commons.collections.CollectionUtils;

import java.util.List;

public class UserTable extends CustomComponent {

    private UserMediator userMediator;

    private Table userTable;

    private Button deleteButton;

    // TODO implement this
    private Button editButton;
    @AutoGenerated
    private FormLayout mainLayout;


    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public UserTable() {
        buildMainLayout();
        setCompositionRoot(mainLayout);
    }

    /**
     * Constructor with parameters.
     *
     * @param userMediator {@link UserMediator}
     */
    public UserTable(UserMediator userMediator) {
        this();
        this.userMediator = userMediator;
        initComponents();
        configureComponents();
        prepareComponents();
        addListeners();
        addComponents();
    }

    /**
     * Refresh table.
     */
    public void refreshTable() {
        int i = 0;
        userTable.removeAllItems();
        List<IUser> users = userMediator.getUserService().getAll();
        if (CollectionUtils.isNotEmpty(users)) {
            for (IUser user : userMediator.getUserService().getAll()) {
                userTable.addItem(new Object[]{user.getId(), user.getName(), user.getContact().getName(), user.getContact().getEmail()},
                    new Integer(i)); // Item identifier
                i++;
            }
        }
    }


    private void addListeners() {
        deleteButton.addListener(new Button.ClickListener() {

            @Override
            public void buttonClick(Button.ClickEvent event) {
                Object rowId = userTable.getValue();
                if (rowId != null) {
                    // TODO delete by login
                    String id = (String) userTable.getContainerProperty(rowId, "id").getValue();
                    if (id != null) {
                        userMediator.deleteUser(id);
                    }
                }

            }
        });
    }

    @AutoGenerated
    private FormLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new FormLayout();
        mainLayout.setImmediate(true);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        return mainLayout;
    }

    private void initComponents() {
        userTable = new Table();
        deleteButton = new Button("delete");
    }

    private void configureComponents() {
        userTable.setSelectable(true);
    }

    private void prepareComponents() {
        prepareTable();
    }

    private void addComponents() {
        mainLayout.addComponent(userTable);
        mainLayout.addComponent(deleteButton);
    }

    private void prepareTable() {
        userTable.addContainerProperty("id", String.class, null);
        userTable.addContainerProperty("login", String.class, null);
        userTable.addContainerProperty("name", String.class, null);
        userTable.addContainerProperty("email", String.class, null);

        userTable.setColumnHeader("id", "Id");
        userTable.setColumnHeader("name", "Login");
        userTable.setColumnHeader("name", "Name");
        userTable.setColumnHeader("email", "Email");

    }
}
